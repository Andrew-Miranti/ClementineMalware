using System.Threading;

namespace Clementine
{
    public abstract class ParallelPayload
    {
        private bool status = false;
        private object statusLock = new object();
        private Thread worker = null;
        private readonly int wait;

        public bool Status
        {
            get
            {
                lock(statusLock)
                {
                    return status;
                }
            }
            private set
            {
                lock (statusLock)
                {
                    status = value;
                }
            }
        }

        public ParallelPayload(int wait)
        {
            this.wait = wait;
        }

        public void Start()
        {
            if (Status)
            {
                return;
            }
            Status = true;
            StartupTasks();
            worker = new Thread(this.MainLoop);
            worker.Start();
        }

        protected virtual void StartupTasks() { }

        protected virtual void ShutdownTasks() { }

        public void Stop()
        {
            if (!Status)
            {
                return;
            }
            Status = false;
            worker.Join();
            worker = null;
            ShutdownTasks();
        }

        private void MainLoop()
        {
            while (true)
            {
                Thread.Sleep(wait);
                if (!Status)
                {
                    break;
                }
                Payload();
            }
        }

        protected abstract void Payload();
    }
}
