using System;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace ClementineBasicServer
{
    class ClementineConnection
    {
        private static readonly UTF8Encoding encoding = new UTF8Encoding();

        private const string REQUEST_STATE = "GET_STATE";
        private const string STEAL_FILE_NAME = "STEAL_FILE_NAME";

        private const int STATE_BYTES = 4;

        private TcpClient client;
        private NetworkStream stream;
        private ClementineStatus status;

        public const byte NO_PAYLOAD_NETWORK = (byte)255;

        private object statusLock = new object();
        private bool done = false;
        public bool Done
        {
            get
            {
                lock(statusLock)
                {
                    return done;
                }
            }

            set
            {
                lock(statusLock)
                {
                    done = value;
                }
            }
        }

        public Thread ConnectionThread;

        public ClementineConnection(TcpClient client, ClementineStatus status)
        {
            Console.WriteLine("Conneciton created");
            this.client = client;
            this.status = status;
            stream = client.GetStream();
            ConnectionThread = new Thread(HandleConnection);
            ConnectionThread.Start();
        }

        private void writeString(string send)
        {
            var requestBytes = encoding.GetBytes(send);
            stream.Write(requestBytes, 0, requestBytes.Length);
            stream.WriteByte(0);
        }

        private string readString()
        {
            using (var result = new MemoryStream())
            {
                byte data;
                while ((data = (byte)stream.ReadByte()) > 0)
                {
                    result.WriteByte(data);
                }
                return encoding.GetString(result.ToArray());
            }
        }

        private byte fromBool(bool val)
        {
            return val ? (byte)1 : (byte)0; // Are you kidding me?
        }

        public void SendState()
        {
            stream.WriteByte(fromBool(status.Done));
            stream.WriteByte(fromBool(status.Destructive));
            stream.WriteByte(fromBool(status.Loud));
            stream.WriteByte(status.RequestedPayload);
        }

        public void SendFileName()
        {
            Console.WriteLine("Ordering theft of " + status.StealFile);
            if (status.StealFile.Length > 0)
            {
                writeString(status.StealFile);
            }
        }

        public void HandleConnection()
        {
            Console.WriteLine("Connection Handling");
            if (!client.Connected)
            {
                return;
            }
            Console.WriteLine("Client really connected");
            var command = readString();
            Console.WriteLine("Command received " + command);
            switch (command)
            {
                case REQUEST_STATE:
                    Console.WriteLine("STATE REQUESTED");
                    SendState();
                    break;
                case STEAL_FILE_NAME:
                    Console.WriteLine("FILE TO STEAL REQUESTED");
                    SendFileName();
                    break;
                default:
                    Console.WriteLine("Illegal Instruction " + command);
                    break;
            }
            Done = true;
        }
    }
}
